<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'hateoas.configuration.relations_repository' shared service.

$a = ${($_ = isset($this->services['jms_serializer.metadata.file_locator']) ? $this->services['jms_serializer.metadata.file_locator'] : $this->load('getJmsSerializer_Metadata_FileLocatorService.php')) && false ?: '_'};

$b = new \Metadata\MetadataFactory(new \Metadata\Driver\DriverChain(array(0 => new \Hateoas\Configuration\Metadata\Driver\YamlDriver($a), 1 => new \Hateoas\Configuration\Metadata\Driver\XmlDriver($a), 2 => new \Hateoas\Configuration\Metadata\Driver\ExtensionDriver(new \Hateoas\Configuration\Metadata\Driver\AnnotationDriver(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->getAnnotationReaderService()) && false ?: '_'})))), 'Metadata\\ClassHierarchyMetadata', false);
$b->setCache(new \Metadata\Cache\FileCache(($this->targetDirs[0].'/hateoas')));

return $this->services['hateoas.configuration.relations_repository'] = new \Hateoas\Configuration\RelationsRepository($b, new \Hateoas\Configuration\Provider\RelationProvider($b, ${($_ = isset($this->services['hateoas.configuration.provider.resolver']) ? $this->services['hateoas.configuration.provider.resolver'] : $this->load('getHateoas_Configuration_Provider_ResolverService.php')) && false ?: '_'}));
