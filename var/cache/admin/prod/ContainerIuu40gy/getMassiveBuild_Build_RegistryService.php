<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'massive_build.build.registry' shared service.

$this->services['massive_build.build.registry'] = $instance = new \Massive\Bundle\BuildBundle\Build\BuildRegistry();

$instance->addBuilder(${($_ = isset($this->services['sulu_core.build.builder.database']) ? $this->services['sulu_core.build.builder.database'] : $this->services['sulu_core.build.builder.database'] = new \Sulu\Bundle\CoreBundle\Build\DatabaseBuilder()) && false ?: '_'});
$instance->addBuilder(${($_ = isset($this->services['sulu_core.build.builder.phpcr']) ? $this->services['sulu_core.build.builder.phpcr'] : $this->services['sulu_core.build.builder.phpcr'] = new \Sulu\Bundle\CoreBundle\Build\PhpcrBuilder()) && false ?: '_'});
$instance->addBuilder(${($_ = isset($this->services['sulu_core.build.builder.cache']) ? $this->services['sulu_core.build.builder.cache'] : $this->services['sulu_core.build.builder.cache'] = new \Sulu\Bundle\CoreBundle\Build\CacheBuilder()) && false ?: '_'});
$instance->addBuilder(${($_ = isset($this->services['sulu_core.build.builder.fixtures']) ? $this->services['sulu_core.build.builder.fixtures'] : $this->services['sulu_core.build.builder.fixtures'] = new \Sulu\Bundle\CoreBundle\Build\FixturesBuilder()) && false ?: '_'});
$instance->addBuilder(${($_ = isset($this->services['sulu_core.build.builder.phpcr_migrations']) ? $this->services['sulu_core.build.builder.phpcr_migrations'] : $this->services['sulu_core.build.builder.phpcr_migrations'] = new \Sulu\Bundle\CoreBundle\Build\PhpcrMigrationsBuilder()) && false ?: '_'});
$instance->addBuilder(${($_ = isset($this->services['sulu_search.build.index']) ? $this->services['sulu_search.build.index'] : $this->services['sulu_search.build.index'] = new \Sulu\Bundle\SearchBundle\Build\IndexBuilder()) && false ?: '_'});
$instance->addBuilder(${($_ = isset($this->services['sulu_media.system_collections.builder']) ? $this->services['sulu_media.system_collections.builder'] : $this->services['sulu_media.system_collections.builder'] = new \Sulu\Component\Media\SystemCollections\SystemCollectionBuilder()) && false ?: '_'});
$instance->addBuilder(${($_ = isset($this->services['sulu_security.build.user']) ? $this->services['sulu_security.build.user'] : $this->services['sulu_security.build.user'] = new \Sulu\Bundle\SecurityBundle\Build\UserBuilder()) && false ?: '_'});
$instance->addBuilder(${($_ = isset($this->services['sulu_core.build.builder.node_order']) ? $this->services['sulu_core.build.builder.node_order'] : $this->load('getSuluCore_Build_Builder_NodeOrderService.php')) && false ?: '_'});
$instance->addBuilder(${($_ = isset($this->services['massive_build.builder.virtual.prod']) ? $this->services['massive_build.builder.virtual.prod'] : $this->load('getMassiveBuild_Builder_Virtual_ProdService.php')) && false ?: '_'});
$instance->addBuilder(${($_ = isset($this->services['massive_build.builder.virtual.dev']) ? $this->services['massive_build.builder.virtual.dev'] : $this->load('getMassiveBuild_Builder_Virtual_DevService.php')) && false ?: '_'});
$instance->addBuilder(${($_ = isset($this->services['massive_build.builder.virtual.maintain']) ? $this->services['massive_build.builder.virtual.maintain'] : $this->services['massive_build.builder.virtual.maintain'] = new \Massive\Bundle\BuildBundle\Builder\VirtualBuilder('maintain', array(0 => 'node_order', 1 => 'search_index', 2 => 'phpcr_migrations'))) && false ?: '_'});

return $instance;
